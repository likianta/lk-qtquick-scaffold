"""
structure: {scope: {sid: {kid: fid}}}
docs: ~/docs/scope-engine.zh.md
"""
import typing as t
from collections import defaultdict

from qtpy.QtCore import Qt

from .__ext__ import QObject
from .__ext__ import slot


class T:
    KID = t.Tuple[int, tuple[bool, bool, bool]]  # key id
    FID = str  # function id
    #   (int key_code, (ctrl, shift, alt))
    Fid2Qobj = t.Dict[FID, QObject]
    
    Scope = str  # scope url.
    #   the form is '<node>/<node>/<node>/...',
    #   for exmaple 'homepage/sidebar/settings'
    #   the default scope is 'global'
    SID = str  # scope instance id.
    #   it is a random id generated by `uuid.uuid1().hex`.
    Scopes = t.Dict[Scope, t.Dict[SID, t.Dict[KID, FID]]]
    
    CurrentState = t.TypedDict('CurrentState', {
        'scope_2_sid': t.Dict[Scope, SID],
        'active_sids': t.Set[SID],
        'kid_2_fid'  : t.Dict[KID, FID],
    })


class ScopeEngine(QObject):
    _scopes: T.Scopes = defaultdict(lambda: defaultdict(dict))
    _fid_2_qobj: T.Fid2Qobj = {}
    _current_state: T.CurrentState = {
        'scope_2_sid': {},
        'active_sids': set(),
        'kid_2_fid'  : {},
    }
    
    @slot(str, str, str, object, int)
    @slot(str, str, str, object, int, int)
    def register_func(
            self, scope: T.Scope, sid: T.SID, fid: T.FID, qobj: QObject,
            key: int, modifier: int = 0
    ) -> None:
        kid = self._compose_kid(key, modifier)
        self._fid_2_qobj[fid] = qobj
        self._scopes[scope][sid][kid] = fid
        if sid in self._current_state['active_sids']:
            self._current_state['kid_2_fid'][kid] = fid
        # print(':l', self._scopes, self._current_state)
    
    # -------------------------------------------------------------------------
    
    @slot(str, str)
    def activate_scope(self, scope: T.Scope, sid: T.SID) -> None:
        if sid in self._current_state['active_sids']:
            return
        
        if last_sid := self._current_state['scope_2_sid'].get(scope):
            for kid in self._scopes[scope][last_sid]:
                self._current_state['kid_2_fid'].pop(kid, None)
        
        self._current_state['scope_2_sid'][scope] = sid
        self._current_state['active_sids'].add(sid)
        self._current_state['kid_2_fid'].update(
            self._scopes[scope][sid]
        )
        # print(':l', self._current_state)
    
    @slot(str, str)
    def deactivate_scope(self, scope: T.Scope, sid: T.SID) -> None:
        if sid not in self._current_state['active_sids']:
            return
        self._current_state['active_sids'].remove(sid)
        for kid in self._scopes[scope][sid]:
            self._current_state['kid_2_fid'].pop(kid, None)
    
    # -------------------------------------------------------------------------
    
    @slot(int, int)
    def on_key(self, key: int, modifier: int) -> None:
        # import lk_logger
        # lk_logger.start_ipython({'key': key})
        kid = self._compose_kid(key, modifier)
        # print(':l', kid, self._current_state)
        if fid := self._current_state['kid_2_fid'].get(kid):
            qobj = self._fid_2_qobj[fid]
            qobj.triggered.emit(fid)
            # self.triggered.emit(fid)
    
    @staticmethod
    def _compose_kid(key: int, modifier: int) -> T.KID:
        return (key, (
            bool(modifier & Qt.ControlModifier),
            bool(modifier & Qt.ShiftModifier),
            bool(modifier & Qt.AltModifier),
        ))
